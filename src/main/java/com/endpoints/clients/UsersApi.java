/*
 * API V3
 * Please log in using your email and password in order to use API
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.endpoints.clients;

import com.endpoints.models.UserCreateModel;
import com.endpoints.models.UserModel;
import com.google.gson.reflect.TypeToken;


import java.util.List;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.response.Response;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;

import static io.restassured.http.Method.*;

public class UsersApi {

    private RequestSpecBuilder reqSpec;

    private UsersApi(RequestSpecBuilder reqSpec) {
        this.reqSpec = reqSpec;
    }

    public static UsersApi users(RequestSpecBuilder reqSpec) {
        return new UsersApi(reqSpec);
    }


    public AllUsersForAccountIdUsingGETOper allUsersForAccountIdUsingGET() {
        return new AllUsersForAccountIdUsingGETOper(reqSpec);
    }

    public CreateUserUsingPOSTOper createUserUsingPOST() {
        return new CreateUserUsingPOSTOper(reqSpec);
    }

    public DeleteUserUsingDELETEOper deleteUserUsingDELETE() {
        return new DeleteUserUsingDELETEOper(reqSpec);
    }

    public GetUserByUserIdUsingGETOper getUserByUserIdUsingGET() {
        return new GetUserByUserIdUsingGETOper(reqSpec);
    }

    public UpdateUserUsingPUTOper updateUserUsingPUT() {
        return new UpdateUserUsingPUTOper(reqSpec);
    }

    /**
    * Customise request specification
    */
    public UsersApi reqSpec(Consumer<RequestSpecBuilder> consumer) {
        consumer.accept(reqSpec);
        return this;
    }

    /**
     * Returns all Users
     * 
     *
     * return List<UserModel>
     */
    public class AllUsersForAccountIdUsingGETOper {

        public static final String REQ_URI = "/users/all";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public AllUsersForAccountIdUsingGETOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        public AllUsersForAccountIdUsingGETOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /users/all
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(GET, REQ_URI));
        }

        /**
         * GET /users/all
         * @return List<UserModel>
         */
        public List<UserModel> executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<List<UserModel>>(){}.getType();
            return execute(handler).as(type);
        }

        /**
         * Customise request specification
         */
        public AllUsersForAccountIdUsingGETOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         */
        public AllUsersForAccountIdUsingGETOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * Creates a new User
     * 
     *
     * @see #body JSON representation of a User to be created (required)
     * return UserModel
     */
    public class CreateUserUsingPOSTOper {

        public static final String REQ_URI = "/users/create";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public CreateUserUsingPOSTOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        public CreateUserUsingPOSTOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /users/create
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(POST, REQ_URI));
        }

        /**
         * POST /users/create
         * @return UserModel
         */
        public UserModel executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<UserModel>(){}.getType();
            return execute(handler).as(type);
        }

         /**
         * @param userModel (UserCreateModel) JSON representation of a User to be created (required)
         */
        public CreateUserUsingPOSTOper body(UserCreateModel userModel) {
            reqSpec.setBody(userModel);
            return this;
        }

        /**
         * Customise request specification
         */
        public CreateUserUsingPOSTOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         */
        public CreateUserUsingPOSTOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * Deletes a User
     * 
     *
     * @see #userIdPath userId (required)
     */
    public class DeleteUserUsingDELETEOper {

        public static final String REQ_URI = "/users/delete/{userId}";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public DeleteUserUsingDELETEOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        public DeleteUserUsingDELETEOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /users/delete/{userId}
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(DELETE, REQ_URI));
        }

        /**
         * @param userId (String) userId (required)
         */
        public DeleteUserUsingDELETEOper userIdPath(Object userId) {
            reqSpec.addPathParam("userId", userId);
            return this;
        }

        /**
         * Customise request specification
         */
        public DeleteUserUsingDELETEOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         */
        public DeleteUserUsingDELETEOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * Returns a User by ID
     * 
     *
     * @see #userIdPath User ID (required)
     * return UserModel
     */
    public class GetUserByUserIdUsingGETOper {

        public static final String REQ_URI = "/users/{userId}";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public GetUserByUserIdUsingGETOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        public GetUserByUserIdUsingGETOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /users/{userId}
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(GET, REQ_URI));
        }

        /**
         * GET /users/{userId}
         * @return UserModel
         */
        public UserModel executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<UserModel>(){}.getType();
            return execute(handler).as(type);
        }

        /**
         * @param userId (String) User ID (required)
         */
        public GetUserByUserIdUsingGETOper userIdPath(Object userId) {
            reqSpec.addPathParam("userId", userId);
            return this;
        }

        /**
         * Customise request specification
         */
        public GetUserByUserIdUsingGETOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         */
        public GetUserByUserIdUsingGETOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * Updates a User
     * 
     *
     * @see #body JSON representation of a User to be updated (required)
     * return UserModel
     */
    public class UpdateUserUsingPUTOper {

        public static final String REQ_URI = "/users/update";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public UpdateUserUsingPUTOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        public UpdateUserUsingPUTOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PUT /users/update
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(PUT, REQ_URI));
        }

        /**
         * PUT /users/update
         * @return UserModel
         */
        public UserModel executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<UserModel>(){}.getType();
            return execute(handler).as(type);
        }

         /**
         * @param userModel (UserModel) JSON representation of a User to be updated (required)
         */
        public UpdateUserUsingPUTOper body(UserModel userModel) {
            reqSpec.setBody(userModel);
            return this;
        }

        /**
         * Customise request specification
         */
        public UpdateUserUsingPUTOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         */
        public UpdateUserUsingPUTOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
}