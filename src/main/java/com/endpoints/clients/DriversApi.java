/*
 * API V3
 * Please log in using your email and password in order to use API
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.endpoints.clients;

import com.endpoints.models.DriverModel;
import com.google.gson.reflect.TypeToken;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.response.Response;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;

import static io.restassured.http.Method.*;

public class DriversApi {

    private RequestSpecBuilder reqSpec;

    private DriversApi(RequestSpecBuilder reqSpec) {
        this.reqSpec = reqSpec;
    }

    public static DriversApi drivers(RequestSpecBuilder reqSpec) {
        return new DriversApi(reqSpec);
    }


    public AllDriversForAccountIdUsingGETOper allDriversForAccountIdUsingGET() {
        return new AllDriversForAccountIdUsingGETOper(reqSpec);
    }

    public CreateDriverUsingPOSTOper createDriverUsingPOST() {
        return new CreateDriverUsingPOSTOper(reqSpec);
    }

    public DeleteDriverUsingDELETEOper deleteDriverUsingDELETE() {
        return new DeleteDriverUsingDELETEOper(reqSpec);
    }

    public UpdateDriverUsingPUTOper updateDriverUsingPUT() {
        return new UpdateDriverUsingPUTOper(reqSpec);
    }

    /**
    * Customise request specification
    */
    public DriversApi reqSpec(Consumer<RequestSpecBuilder> consumer) {
        consumer.accept(reqSpec);
        return this;
    }

    /**
     * Return all drivers for an Account
     * 
     *
     * return List<DriverModel>
     */
    public class AllDriversForAccountIdUsingGETOper {

        public static final String REQ_URI = "/drivers/all";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public AllDriversForAccountIdUsingGETOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        public AllDriversForAccountIdUsingGETOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /drivers/all
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(GET, REQ_URI));
        }

        /**
         * GET /drivers/all
         * @return List<DriverModel>
         */
        public List<DriverModel> executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<List<DriverModel>>(){}.getType();
            return execute(handler).as(type);
        }

        /**
         * Customise request specification
         */
        public AllDriversForAccountIdUsingGETOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         */
        public AllDriversForAccountIdUsingGETOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * Create new driver
     * 
     *
     * @see #body driverModel (required)
     * return DriverModel
     */
    public class CreateDriverUsingPOSTOper {

        public static final String REQ_URI = "/drivers/create";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public CreateDriverUsingPOSTOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        public CreateDriverUsingPOSTOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /drivers/create
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(POST, REQ_URI));
        }

        /**
         * POST /drivers/create
         * @return DriverModel
         */
        public DriverModel executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<DriverModel>(){}.getType();
            return execute(handler).as(type);
        }

         /**
         * @param driverModel (DriverModel) driverModel (required)
         */
        public CreateDriverUsingPOSTOper body(DriverModel driverModel) {
            reqSpec.setBody(driverModel);
            return this;
        }

        /**
         * Customise request specification
         */
        public CreateDriverUsingPOSTOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         */
        public CreateDriverUsingPOSTOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * Delete driver
     * 
     *
     * @see #driverIdPath driverId (required)
     */
    public class DeleteDriverUsingDELETEOper {

        public static final String REQ_URI = "/drivers/delete/{driverId}";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public DeleteDriverUsingDELETEOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        public DeleteDriverUsingDELETEOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /drivers/delete/{driverId}
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(DELETE, REQ_URI));
        }

        /**
         * @param driverId (String) driverId (required)
         */
        public DeleteDriverUsingDELETEOper driverIdPath(Object driverId) {
            reqSpec.addPathParam("driverId", driverId);
            return this;
        }

        /**
         * Customise request specification
         */
        public DeleteDriverUsingDELETEOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         */
        public DeleteDriverUsingDELETEOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * Update driver
     * 
     *
     * @see #body driver (required)
     * return DriverModel
     */
    public class UpdateDriverUsingPUTOper {

        public static final String REQ_URI = "/drivers/update";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public UpdateDriverUsingPUTOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        public UpdateDriverUsingPUTOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PUT /drivers/update
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(PUT, REQ_URI));
        }

        /**
         * PUT /drivers/update
         * @return DriverModel
         */
        public DriverModel executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<DriverModel>(){}.getType();
            return execute(handler).as(type);
        }

         /**
         * @param driver (DriverModel) driver (required)
         */
        public UpdateDriverUsingPUTOper body(DriverModel driver) {
            reqSpec.setBody(driver);
            return this;
        }

        /**
         * Customise request specification
         */
        public UpdateDriverUsingPUTOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         */
        public UpdateDriverUsingPUTOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
}