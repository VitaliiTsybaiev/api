/*
 * API V3
 * Please log in using your email and password in order to use API
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.endpoints.clients;

import com.google.gson.reflect.TypeToken;
import com.endpoints.models.DeviceGroupModel;
import com.endpoints.models.DeviceModel;
import com.endpoints.models.UpdateDeviceModel;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.response.Response;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import com.endpoints.JSON;

import static io.restassured.http.Method.*;

public class DevicesApi {

    private RequestSpecBuilder reqSpec;

    private DevicesApi(RequestSpecBuilder reqSpec) {
        this.reqSpec = reqSpec;
    }

    public static DevicesApi devices(RequestSpecBuilder reqSpec) {
        return new DevicesApi(reqSpec);
    }


    public FindAllDevicesForAccountIdUsingGETOper findAllDevicesForAccountIdUsingGET() {
        return new FindAllDevicesForAccountIdUsingGETOper(reqSpec);
    }

    public FindAllDevicesForGroupIdUsingGETOper findAllDevicesForGroupIdUsingGET() {
        return new FindAllDevicesForGroupIdUsingGETOper(reqSpec);
    }

    public FindAllGroupsForDeviceIdUsingGETOper findAllGroupsForDeviceIdUsingGET() {
        return new FindAllGroupsForDeviceIdUsingGETOper(reqSpec);
    }

    public GetDeviceByDeviceIdUsingGETOper getDeviceByDeviceIdUsingGET() {
        return new GetDeviceByDeviceIdUsingGETOper(reqSpec);
    }

    public UpdateDeviceUsingPUTOper updateDeviceUsingPUT() {
        return new UpdateDeviceUsingPUTOper(reqSpec);
    }

    /**
    * Customise request specification
    */
    public DevicesApi reqSpec(Consumer<RequestSpecBuilder> consumer) {
        consumer.accept(reqSpec);
        return this;
    }

    /**
     * Returns all Devices available for the current User
     * 
     *
     * @see #includeInactiveQuery Indicates whether inactive devices should be included into response (optional, default to false)
     * return List<DeviceModel>
     */
    public class FindAllDevicesForAccountIdUsingGETOper {

        public static final String REQ_URI = "/devices/all";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public FindAllDevicesForAccountIdUsingGETOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        public FindAllDevicesForAccountIdUsingGETOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /devices/all
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(GET, REQ_URI));
        }

        /**
         * GET /devices/all
         * @return List<DeviceModel>
         */
        public List<DeviceModel> executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<List<DeviceModel>>(){}.getType();
            return execute(handler).as(type);
        }

        /**
         * @param includeInactive (Boolean) Indicates whether inactive devices should be included into response (optional, default to false)
         */
        public FindAllDevicesForAccountIdUsingGETOper includeInactiveQuery(Object... includeInactive) {
            reqSpec.addQueryParam("includeInactive", includeInactive);
            return this;
        }

        /**
         * Customise request specification
         */
        public FindAllDevicesForAccountIdUsingGETOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         */
        public FindAllDevicesForAccountIdUsingGETOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * Returns all Devices in a Device Group
     * 
     *
     * @see #groupIdPath Device Group ID to get Devices for (required)
     * @see #includeInactiveQuery Indicates whether inactive devices should be included into the response (optional, default to false)
     * return List<DeviceModel>
     */
    public class FindAllDevicesForGroupIdUsingGETOper {

        public static final String REQ_URI = "/devices/group/{groupId}";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public FindAllDevicesForGroupIdUsingGETOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        public FindAllDevicesForGroupIdUsingGETOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /devices/group/{groupId}
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(GET, REQ_URI));
        }

        /**
         * GET /devices/group/{groupId}
         * @return List<DeviceModel>
         */
        public List<DeviceModel> executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<List<DeviceModel>>(){}.getType();
            return execute(handler).as(type);
        }

        /**
         * @param groupId (String) Device Group ID to get Devices for (required)
         */
        public FindAllDevicesForGroupIdUsingGETOper groupIdPath(Object groupId) {
            reqSpec.addPathParam("groupId", groupId);
            return this;
        }

        /**
         * @param includeInactive (Boolean) Indicates whether inactive devices should be included into the response (optional, default to false)
         */
        public FindAllDevicesForGroupIdUsingGETOper includeInactiveQuery(Object... includeInactive) {
            reqSpec.addQueryParam("includeInactive", includeInactive);
            return this;
        }

        /**
         * Customise request specification
         */
        public FindAllDevicesForGroupIdUsingGETOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         */
        public FindAllDevicesForGroupIdUsingGETOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * Returns all Device Groups for a Device
     * 
     *
     * @see #deviceIdPath Device ID to get Groups for (required)
     * return List<DeviceGroupModel>
     */
    public class FindAllGroupsForDeviceIdUsingGETOper {

        public static final String REQ_URI = "/devices/groups/{deviceId}";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public FindAllGroupsForDeviceIdUsingGETOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        public FindAllGroupsForDeviceIdUsingGETOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /devices/groups/{deviceId}
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(GET, REQ_URI));
        }

        /**
         * GET /devices/groups/{deviceId}
         * @return List<DeviceGroupModel>
         */
        public List<DeviceGroupModel> executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<List<DeviceGroupModel>>(){}.getType();
            return execute(handler).as(type);
        }

        /**
         * @param deviceId (String) Device ID to get Groups for (required)
         */
        public FindAllGroupsForDeviceIdUsingGETOper deviceIdPath(Object deviceId) {
            reqSpec.addPathParam("deviceId", deviceId);
            return this;
        }

        /**
         * Customise request specification
         */
        public FindAllGroupsForDeviceIdUsingGETOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         */
        public FindAllGroupsForDeviceIdUsingGETOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * Returns a Device by its ID
     * 
     *
     * @see #deviceIdPath Device ID (required)
     * return DeviceModel
     */
    public class GetDeviceByDeviceIdUsingGETOper {

        public static final String REQ_URI = "/devices/{deviceId}";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public GetDeviceByDeviceIdUsingGETOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        public GetDeviceByDeviceIdUsingGETOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /devices/{deviceId}
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(GET, REQ_URI));
        }

        /**
         * GET /devices/{deviceId}
         * @return DeviceModel
         */
        public DeviceModel executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<DeviceModel>(){}.getType();
            return execute(handler).as(type);
        }

        /**
         * @param deviceId (String) Device ID (required)
         */
        public GetDeviceByDeviceIdUsingGETOper deviceIdPath(Object deviceId) {
            reqSpec.addPathParam("deviceId", deviceId);
            return this;
        }

        /**
         * Customise request specification
         */
        public GetDeviceByDeviceIdUsingGETOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         */
        public GetDeviceByDeviceIdUsingGETOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * Updates a Device
     * 
     *
     * @see #body JSON representation of a Device to be updated (required)
     * return DeviceModel
     */
    public class UpdateDeviceUsingPUTOper {

        public static final String REQ_URI = "/devices/update";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public UpdateDeviceUsingPUTOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        public UpdateDeviceUsingPUTOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PUT /devices/update
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(PUT, REQ_URI));
        }

        /**
         * PUT /devices/update
         * @return DeviceModel
         */
        public DeviceModel executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<DeviceModel>(){}.getType();
            return execute(handler).as(type);
        }

         /**
         * @param deviceModel (UpdateDeviceModel) JSON representation of a Device to be updated (required)
         */
        public UpdateDeviceUsingPUTOper body(UpdateDeviceModel deviceModel) {
            reqSpec.setBody(deviceModel);
            return this;
        }

        /**
         * Customise request specification
         */
        public UpdateDeviceUsingPUTOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         */
        public UpdateDeviceUsingPUTOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
}