/*
 * API V3
 * Please log in using your email and password in order to use API
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.endpoints.clients;

import com.google.gson.reflect.TypeToken;
import com.endpoints.models.GeozoneModel;
import com.endpoints.models.GeozoneWithActivitiesModel;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.response.Response;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import com.endpoints.JSON;

import static io.restassured.http.Method.*;

public class GeozonesApi {

    private RequestSpecBuilder reqSpec;

    private GeozonesApi(RequestSpecBuilder reqSpec) {
        this.reqSpec = reqSpec;
    }

    public static GeozonesApi geozones(RequestSpecBuilder reqSpec) {
        return new GeozonesApi(reqSpec);
    }


    public AllGeozonesForAccountIdUsingGETOper allGeozonesForAccountIdUsingGET() {
        return new AllGeozonesForAccountIdUsingGETOper(reqSpec);
    }

    public CreateGeozoneUsingPOSTOper createGeozoneUsingPOST() {
        return new CreateGeozoneUsingPOSTOper(reqSpec);
    }

    public DeleteGeozoneUsingDELETEOper deleteGeozoneUsingDELETE() {
        return new DeleteGeozoneUsingDELETEOper(reqSpec);
    }

    public GeozoneActivityForAccountIdAndUserIdUsingGETOper geozoneActivityForAccountIdAndUserIdUsingGET() {
        return new GeozoneActivityForAccountIdAndUserIdUsingGETOper(reqSpec);
    }

    public GetGeozoneByIdUsingGETOper getGeozoneByIdUsingGET() {
        return new GetGeozoneByIdUsingGETOper(reqSpec);
    }

    public UpdateGeozoneUsingPUTOper updateGeozoneUsingPUT() {
        return new UpdateGeozoneUsingPUTOper(reqSpec);
    }

    /**
    * Customise request specification
    */
    public GeozonesApi reqSpec(Consumer<RequestSpecBuilder> consumer) {
        consumer.accept(reqSpec);
        return this;
    }

    /**
     * Returns all Geozones
     * 
     *
     * return List<GeozoneModel>
     */
    public class AllGeozonesForAccountIdUsingGETOper {

        public static final String REQ_URI = "/geozones/all";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public AllGeozonesForAccountIdUsingGETOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        public AllGeozonesForAccountIdUsingGETOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /geozones/all
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(GET, REQ_URI));
        }

        /**
         * GET /geozones/all
         * @return List<GeozoneModel>
         */
        public List<GeozoneModel> executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<List<GeozoneModel>>(){}.getType();
            return execute(handler).as(type);
        }

        /**
         * Customise request specification
         */
        public AllGeozonesForAccountIdUsingGETOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         */
        public AllGeozonesForAccountIdUsingGETOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * Creates a new Geozone
     * 
     *
     * @see #body JSON representation of a Geozone to be created (required)
     * return GeozoneModel
     */
    public class CreateGeozoneUsingPOSTOper {

        public static final String REQ_URI = "/geozones/create";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public CreateGeozoneUsingPOSTOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        public CreateGeozoneUsingPOSTOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /geozones/create
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(POST, REQ_URI));
        }

        /**
         * POST /geozones/create
         * @return GeozoneModel
         */
        public GeozoneModel executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<GeozoneModel>(){}.getType();
            return execute(handler).as(type);
        }

         /**
         * @param geozoneModel (GeozoneModel) JSON representation of a Geozone to be created (required)
         */
        public CreateGeozoneUsingPOSTOper body(GeozoneModel geozoneModel) {
            reqSpec.setBody(geozoneModel);
            return this;
        }

        /**
         * Customise request specification
         */
        public CreateGeozoneUsingPOSTOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         */
        public CreateGeozoneUsingPOSTOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * Deletes a Geozone
     * 
     *
     * @see #geozoneIdPath ID of a Geozone to be deleted (required)
     */
    public class DeleteGeozoneUsingDELETEOper {

        public static final String REQ_URI = "/geozones/delete/{geozoneId}";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public DeleteGeozoneUsingDELETEOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        public DeleteGeozoneUsingDELETEOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /geozones/delete/{geozoneId}
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(DELETE, REQ_URI));
        }

        /**
         * @param geozoneId (String) ID of a Geozone to be deleted (required)
         */
        public DeleteGeozoneUsingDELETEOper geozoneIdPath(Object geozoneId) {
            reqSpec.addPathParam("geozoneId", geozoneId);
            return this;
        }

        /**
         * Customise request specification
         */
        public DeleteGeozoneUsingDELETEOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         */
        public DeleteGeozoneUsingDELETEOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * Returns Geozone activity
     * 
     *
     * @see #geozoneIdPath Geozone ID to get activity for (required)
     * @see #fromQuery UTC date and time in Epoch seconds or millis. Indicates a starting point in time from which to gather activities (required)
     * @see #toQuery UTC date and time in Epoch seconds or millis. Indicates an ending point in time up to which to gather activities (required)
     * return GeozoneWithActivitiesModel
     */
    public class GeozoneActivityForAccountIdAndUserIdUsingGETOper {

        public static final String REQ_URI = "/geozones/activity/{geozoneId}";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public GeozoneActivityForAccountIdAndUserIdUsingGETOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        public GeozoneActivityForAccountIdAndUserIdUsingGETOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /geozones/activity/{geozoneId}
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(GET, REQ_URI));
        }

        /**
         * GET /geozones/activity/{geozoneId}
         * @return GeozoneWithActivitiesModel
         */
        public GeozoneWithActivitiesModel executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<GeozoneWithActivitiesModel>(){}.getType();
            return execute(handler).as(type);
        }

        /**
         * @param geozoneId (String) Geozone ID to get activity for (required)
         */
        public GeozoneActivityForAccountIdAndUserIdUsingGETOper geozoneIdPath(Object geozoneId) {
            reqSpec.addPathParam("geozoneId", geozoneId);
            return this;
        }

        /**
         * @param from (Long) UTC date and time in Epoch seconds or millis. Indicates a starting point in time from which to gather activities (required)
         */
        public GeozoneActivityForAccountIdAndUserIdUsingGETOper fromQuery(Object... from) {
            reqSpec.addQueryParam("from", from);
            return this;
        }

        /**
         * @param to (Long) UTC date and time in Epoch seconds or millis. Indicates an ending point in time up to which to gather activities (required)
         */
        public GeozoneActivityForAccountIdAndUserIdUsingGETOper toQuery(Object... to) {
            reqSpec.addQueryParam("to", to);
            return this;
        }

        /**
         * Customise request specification
         */
        public GeozoneActivityForAccountIdAndUserIdUsingGETOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         */
        public GeozoneActivityForAccountIdAndUserIdUsingGETOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * Returns a Geozone by its ID
     * 
     *
     * @see #geozoneIdPath Geozone ID (required)
     * return GeozoneModel
     */
    public class GetGeozoneByIdUsingGETOper {

        public static final String REQ_URI = "/geozones/{geozoneId}";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public GetGeozoneByIdUsingGETOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        public GetGeozoneByIdUsingGETOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /geozones/{geozoneId}
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(GET, REQ_URI));
        }

        /**
         * GET /geozones/{geozoneId}
         * @return GeozoneModel
         */
        public GeozoneModel executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<GeozoneModel>(){}.getType();
            return execute(handler).as(type);
        }

        /**
         * @param geozoneId (String) Geozone ID (required)
         */
        public GetGeozoneByIdUsingGETOper geozoneIdPath(Object geozoneId) {
            reqSpec.addPathParam("geozoneId", geozoneId);
            return this;
        }

        /**
         * Customise request specification
         */
        public GetGeozoneByIdUsingGETOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         */
        public GetGeozoneByIdUsingGETOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * Updates a Geozone
     * 
     *
     * @see #body JSON representation of a Geozone to be updated (required)
     * return GeozoneModel
     */
    public class UpdateGeozoneUsingPUTOper {

        public static final String REQ_URI = "/geozones/update";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public UpdateGeozoneUsingPUTOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        public UpdateGeozoneUsingPUTOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PUT /geozones/update
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(PUT, REQ_URI));
        }

        /**
         * PUT /geozones/update
         * @return GeozoneModel
         */
        public GeozoneModel executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<GeozoneModel>(){}.getType();
            return execute(handler).as(type);
        }

         /**
         * @param geoZoneModel (GeozoneModel) JSON representation of a Geozone to be updated (required)
         */
        public UpdateGeozoneUsingPUTOper body(GeozoneModel geoZoneModel) {
            reqSpec.setBody(geoZoneModel);
            return this;
        }

        /**
         * Customise request specification
         */
        public UpdateGeozoneUsingPUTOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         */
        public UpdateGeozoneUsingPUTOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
}