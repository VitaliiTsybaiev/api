/*
 * API V3
 * Please log in using your email and password in order to use API
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.endpoints;

import com.endpoints.clients.JwtAuthenticationApi;
import com.endpoints.models.JwtAuthModel;
import com.endpoints.models.JwtModel;
import com.endpoints.models.RefreshTokenRequestModel;
import com.endpoints.ApiClient;
import com.endpoints.ResponseSpecBuilders;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.filter.log.ErrorLoggingFilter;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static com.endpoints.GsonObjectMapper.gson;
import static io.restassured.config.ObjectMapperConfig.objectMapperConfig;
import static io.restassured.config.RestAssuredConfig.config;

/**
 * API tests for JwtAuthenticationApi
 */
public class JwtAuthenticationApiTest {

    private JwtAuthenticationApi api;

    @BeforeClass
    public void createApi() {
        api = ApiClient.api(ApiClient.Config.apiConfig().reqSpecSupplier(
                () -> new RequestSpecBuilder().setConfig(config().objectMapperConfig(objectMapperConfig().defaultObjectMapper(gson())))
                        .addFilter(new ErrorLoggingFilter())
                        .setBaseUri("https://api.staging.clearpathgps.com/v3.0"))).jwtAuthentication();
    }

    /**
     * OK
     */
    @Test
    public void shouldSee200AfterAuthenticateWithTokenUsingPOST() {
        JwtAuthModel model = null;
        api.authenticateWithTokenUsingPOST()
                .body(model).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Bad Request
     */
    @Test
    public void shouldSee400AfterAuthenticateWithTokenUsingPOST() {
        JwtAuthModel model = null;
        api.authenticateWithTokenUsingPOST()
                .body(model).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Unauthorized
     */
    @Test
    public void shouldSee401AfterAuthenticateWithTokenUsingPOST() {
        JwtAuthModel model = null;
        api.authenticateWithTokenUsingPOST()
                .body(model).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Locked
     */
    @Test
    public void shouldSee423AfterAuthenticateWithTokenUsingPOST() {
        JwtAuthModel model = null;
        api.authenticateWithTokenUsingPOST()
                .body(model).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Too many requests
     */
    @Test
    public void shouldSee429AfterAuthenticateWithTokenUsingPOST() {
        JwtAuthModel model = null;
        api.authenticateWithTokenUsingPOST()
                .body(model).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * OK
     */
    @Test
    public void shouldSee200AfterRefreshAuthTokenUsingPOST() {
        RefreshTokenRequestModel requestModel = null;
        api.refreshAuthTokenUsingPOST()
                .body(requestModel).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Bad Request
     */
    @Test
    public void shouldSee400AfterRefreshAuthTokenUsingPOST() {
        RefreshTokenRequestModel requestModel = null;
        api.refreshAuthTokenUsingPOST()
                .body(requestModel).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Unauthorized
     */
    @Test
    public void shouldSee401AfterRefreshAuthTokenUsingPOST() {
        RefreshTokenRequestModel requestModel = null;
        api.refreshAuthTokenUsingPOST()
                .body(requestModel).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Locked
     */
    @Test
    public void shouldSee423AfterRefreshAuthTokenUsingPOST() {
        RefreshTokenRequestModel requestModel = null;
        api.refreshAuthTokenUsingPOST()
                .body(requestModel).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Too many requests
     */
    @Test
    public void shouldSee429AfterRefreshAuthTokenUsingPOST() {
        RefreshTokenRequestModel requestModel = null;
        api.refreshAuthTokenUsingPOST()
                .body(requestModel).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

}