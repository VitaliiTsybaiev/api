/*
 * API V3
 * Please log in using your email and password in order to use API
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.endpoints;


import com.endpoints.clients.UsersApi;
import com.endpoints.models.UserCreateModel;
import com.endpoints.models.UserModel;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.filter.log.ErrorLoggingFilter;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Ignore;
import org.testng.annotations.Test;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static com.endpoints.GsonObjectMapper.gson;
import static io.restassured.config.ObjectMapperConfig.objectMapperConfig;
import static io.restassured.config.RestAssuredConfig.config;

/**
 * API tests for UsersApi
 */

public class UsersApiTest {

    private UsersApi api;

    @BeforeClass
    public void createApi() {
        api = ApiClient.api(ApiClient.Config.apiConfig().reqSpecSupplier(
                () -> new RequestSpecBuilder().setConfig(config().objectMapperConfig(objectMapperConfig().defaultObjectMapper(gson())))
                        .addFilter(new ErrorLoggingFilter())
                        .setBaseUri("https://api.staging.clearpathgps.com/v3.0"))).users();
    }

    /**
     * OK
     */
    @Test
    public void shouldSee200AfterAllUsersForAccountIdUsingGET() {
        api.allUsersForAccountIdUsingGET().execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Bad Request
     */
    @Test
    public void shouldSee400AfterAllUsersForAccountIdUsingGET() {
        api.allUsersForAccountIdUsingGET().execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Unauthorized
     */
    @Test
    public void shouldSee401AfterAllUsersForAccountIdUsingGET() {
        api.allUsersForAccountIdUsingGET().execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Insufficient privileges
     */
    @Test
    public void shouldSee403AfterAllUsersForAccountIdUsingGET() {
        api.allUsersForAccountIdUsingGET().execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Too many requests
     */
    @Test
    public void shouldSee429AfterAllUsersForAccountIdUsingGET() {
        api.allUsersForAccountIdUsingGET().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Created
     */
    @Test
    public void shouldSee201AfterCreateUserUsingPOST() {
        UserCreateModel userModel = null;
        api.createUserUsingPOST()
                .body(userModel).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Invalid JSON
     */
    @Test
    public void shouldSee400AfterCreateUserUsingPOST() {
        UserCreateModel userModel = null;
        api.createUserUsingPOST()
                .body(userModel).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Unauthorized
     */
    @Test
    public void shouldSee401AfterCreateUserUsingPOST() {
        UserCreateModel userModel = null;
        api.createUserUsingPOST()
                .body(userModel).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Insufficient privileges
     */
    @Test
    public void shouldSee403AfterCreateUserUsingPOST() {
        UserCreateModel userModel = null;
        api.createUserUsingPOST()
                .body(userModel).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * User already exists
     */
    @Test
    public void shouldSee409AfterCreateUserUsingPOST() {
        UserCreateModel userModel = null;
        api.createUserUsingPOST()
                .body(userModel).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Too many requests
     */
    @Test
    public void shouldSee429AfterCreateUserUsingPOST() {
        UserCreateModel userModel = null;
        api.createUserUsingPOST()
                .body(userModel).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * No Content
     */
    @Test
    public void shouldSee204AfterDeleteUserUsingDELETE() {
        String userId = null;
        api.deleteUserUsingDELETE()
                .userIdPath(userId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Bad Request
     */
    @Test
    public void shouldSee400AfterDeleteUserUsingDELETE() {
        String userId = null;
        api.deleteUserUsingDELETE()
                .userIdPath(userId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Unauthorized
     */
    @Test
    public void shouldSee401AfterDeleteUserUsingDELETE() {
        String userId = null;
        api.deleteUserUsingDELETE()
                .userIdPath(userId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Insufficient privileges
     */
    @Test
    public void shouldSee403AfterDeleteUserUsingDELETE() {
        String userId = null;
        api.deleteUserUsingDELETE()
                .userIdPath(userId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Too many requests
     */
    @Test
    public void shouldSee429AfterDeleteUserUsingDELETE() {
        String userId = null;
        api.deleteUserUsingDELETE()
                .userIdPath(userId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * OK
     */
    @Test
    public void shouldSee200AfterGetUserByUserIdUsingGET() {
        String userId = null;
        api.getUserByUserIdUsingGET()
                .userIdPath(userId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Bad Request
     */
    @Test
    public void shouldSee400AfterGetUserByUserIdUsingGET() {
        String userId = null;
        api.getUserByUserIdUsingGET()
                .userIdPath(userId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Unauthorized
     */
    @Test
    public void shouldSee401AfterGetUserByUserIdUsingGET() {
        String userId = null;
        api.getUserByUserIdUsingGET()
                .userIdPath(userId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Access denied | Insufficient privileges
     */
    @Test
    public void shouldSee403AfterGetUserByUserIdUsingGET() {
        String userId = null;
        api.getUserByUserIdUsingGET()
                .userIdPath(userId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * User not found
     */
    @Test
    public void shouldSee404AfterGetUserByUserIdUsingGET() {
        String userId = null;
        api.getUserByUserIdUsingGET()
                .userIdPath(userId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Too many requests
     */
    @Test
    public void shouldSee429AfterGetUserByUserIdUsingGET() {
        String userId = null;
        api.getUserByUserIdUsingGET()
                .userIdPath(userId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * OK
     */
    @Test
    public void shouldSee200AfterUpdateUserUsingPUT() {
        UserModel userModel = null;
        api.updateUserUsingPUT()
                .body(userModel).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Invalid JSON
     */
    @Test
    public void shouldSee400AfterUpdateUserUsingPUT() {
        UserModel userModel = null;
        api.updateUserUsingPUT()
                .body(userModel).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Unauthorized
     */
    @Test
    public void shouldSee401AfterUpdateUserUsingPUT() {
        UserModel userModel = null;
        api.updateUserUsingPUT()
                .body(userModel).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Insufficient privileges
     */
    @Test
    public void shouldSee403AfterUpdateUserUsingPUT() {
        UserModel userModel = null;
        api.updateUserUsingPUT()
                .body(userModel).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * User not found
     */
    @Test
    public void shouldSee404AfterUpdateUserUsingPUT() {
        UserModel userModel = null;
        api.updateUserUsingPUT()
                .body(userModel).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Too many requests
     */
    @Test
    public void shouldSee429AfterUpdateUserUsingPUT() {
        UserModel userModel = null;
        api.updateUserUsingPUT()
                .body(userModel).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

}